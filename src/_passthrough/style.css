:root
{
  --body-level-gutter: 1rem;
  --content-gutter: 1rem;
  --content-width: min(140ch, calc(100vw - (var(--body-level-gutter) * 2)));
  --body-level-inline-padding: calc((100vw - var(--content-width)) / 2);
  --content-aside-width: calc(var(--content-width) / 3);
  --header-height: 5rem;
  --footer-height: 6rem;
  --header-background-color: hsla(220, 80%, 60%,0.8);
  --footer-background-color: hsla(220, 80%, 30%,0.8);
  --aside-background-color: hsla(220, 20%, 90%,0.6);
  --font-color-primary: hsla(220, 5%, 15%,1);
  --font-color-alt: hsla(220, 5%, 97.5%,1);
}
html
{
color: var(--font-color-primary);
}

html *,
html *::before,
html *::after
{
  box-sizing: border-box;
  margin: 0;
}
.page-wrapper .content-wrapper .bb-reset
{
  margin: 0;
  padding: 0;
}

body
{
  min-height: 100vh;
}

/* flex utility classes */
.flex
{
  display: flex;
}

.flex-dir-col
{
  flex-direction: column;
}

.flex-just-str
{
  justify-content: stretch;
}

.flex-end
{
  justify-content: flex-end;
}

.flex.items-cntr,
.flex.all-cntr
{
  align-items: center;
}

.flex.content-cntr,
.flex.all-cntr
{
  justify-content: center;
}

/* grid utility classes */
.grid
{
  display: grid;
}

.page-wrapper,
.content-wrapper
{
  overflow-x: hidden;
}

.page-wrapper > *,
[class*='wrapper'],
[class*='has-aside']
{
  position: relative;
}

.page-wrapper.grid
{
  flex: 1 auto;
  grid-template-rows: var(--header-height) calc( 100% - (var(--header-height) + var(--footer-height)) ) var(--footer-height);
  grid-template-columns: 1fr;
  grid-template-areas:
    'header'
    'main'
    'footer';
}

.page-wrapper > header
{
  grid-area: header;
}

.page-wrapper > header > .content-wrapper
{
  background-color: var(--header-background-color);
  color: var(--font-color-alt);
}

header  nav,
header  nav > ul
{
  flex: 1 auto;
}

header .content-wrapper nav > ul,
header .content-wrapper nav > ul > li
{
  text-transform: uppercase;
  list-style: none;
  padding: 0;
  margin-left: calc(2 * var(--content-gutter));
}

header li a
{
  padding: var(--content-gutter);
}

header a
{
  text-decoration: none;
}

.content-wrapper .header-logo {
  padding: 0;
}

.header-logo > * {
  padding: var(--content-gutter);
}

.page-wrapper > main
{
  grid-area: main;
}

.page-wrapper > main > .content-wrapper
{
  padding-top: calc(2 * var(--body-level-gutter));
  padding-bottom: calc(2 * var(--body-level-gutter));
}

.page-wrapper > footer
{
  grid-area: footer;
}

.page-wrapper > footer > .content-wrapper
{
  background-color: var(--footer-background-color);
  color: var(--font-color-alt);
}

.page-wrapper > * > .content-wrapper
{
  padding-inline-start: var(--body-level-inline-padding);
  padding-inline-end: var(--body-level-inline-padding);
}

.page-wrapper > * + * > .content-wrapper
{
  padding-top: var(--body-level-gutter);
}

header > .content-wrapper,
footer > .content-wrapper
{
  padding-top: var(--body-level-gutter);
  padding-bottom: var(--body-level-gutter);
  backdrop-filter: blur(16px);
  left: 0;
  right: 0;
}

header > .content-wrapper
{
  padding-top: var(--body-level-gutter);
  margin-top: 0;
  position: fixed;
  top: 0;
  z-index: 1;
  height: var(--header-height);
}

footer > .content-wrapper
{
  position: absolute;
  bottom: 0;
  height: var(--footer-height);
}

.content-wrapper > *
{
  padding: 0 var(--content-gutter);
}

.content-wrapper > ul,
.content-wrapper > ol
{
  padding-left: calc(2 * var(--content-gutter));
}

.content-wrapper * + :not(hr):not(br) {
  padding-top: var(--content-gutter);
}

hr {
  margin: calc(2 * var(--content-gutter)) 0;
}

aside {
  padding: var(--content-gutter);
  background-color: var(--aside-background-color);
  width: 80%;
  margin: var(--content-gutter) auto;
}

@media screen and (max-width:799px)
{
  .has-aside-left {
    display: flex;
    flex-direction: column;
  }
  .has-aside-left > aside {
    order: -1; /* better solved with semantic HTML, this will throw off keyboard-only users */
  }
}

@media screen and (min-width:800px)
{
  [class*='has-aside']
  {
    display: grid;
    grid-template-columns: [main] 4fr [aside] 2fr;
    grid-template-rows: [content-start] repeat(auto-fit, minmax(1rem, 1fr)) [content-end];
    column-gap: var(--content-gutter);
  }

  [class*='has-aside'] > * {
    grid-column: main;
  }

  [class*='has-aside'] > aside
  {
    width: unset;
    margin: unset;
    grid-column: aside;
    grid-row-start: 1;
    grid-row-end: span end;
  }
  .has-aside-left
  {
    grid-template-columns: [aside] 2fr [main] 4fr;
  }

  .content-wrapper > .has-aside-left > aside + * {
    padding-top: unset;
  }
}
